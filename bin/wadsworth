#!/usr/bin/env node

/* eslint no-console: 0 */
const http = require('http');
const fs = require('fs');
const mri = require('mri');
const help = require('mri-help');
const serve = require('../');

const opts = help({
  boolean: ['console'],
  alias: { port: 'p' },
  default: { console: true, port: 8080 },
  help: {
    '@description': `file - JS file to serve`,
    '@signature': '[options] <file>',
    '!console': 'Disable console.log redirection',
    port: 'Port to listen on',
  }
});

const args = mri(process.argv.slice(2), opts);

// eslint-disable-next-line prefer-destructuring
args.file = args._[0];
args['no-console'] = !args.console;

if (args.file == null) {
  opts.showHelp();
}

function getSource(callback) {
  if (!args.file) {
    let src = '';
    process.stdin.resume();
    process.stdin.on('data', data => {
      src += data.toString();
    });
    process.stdin.on('close', () => {
      callback(src);
    });
  } else {
    callback(cb => {
      cb(null, fs.createReadStream(args.file));
    });
  }
}

getSource(src => {
  const handler = serve({
    noConsole: args['no-console'],
    src,
  });

  http.createServer(handler).listen(args.port, err => {
    if (err) {
      throw err;
    }

    console.log(`Listening on port ${args.port}`);
  });
});
